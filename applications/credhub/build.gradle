buildscript {
    ext {
        springCloudContractVersion = '2.0.2.RELEASE'
        springRestDocsVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url("http://repo.spring.io/plugins-release") }
        maven { url("https://plugins.gradle.org/m2/") }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.springframework.cloud:spring-cloud-contract-gradle-plugin:$springCloudContractVersion")
    }
}

plugins {
    id "org.asciidoctor.convert" version "1.5.3"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply from: "server-version.gradle"
apply from: "${rootDir.toPath()}/kotlin.gradle"
apply from: "${rootDir.toPath()}/ktlint.gradle"
apply from: "${rootDir.toPath()}/spring-rest-docs-config.gradle"
apply from: "${rootDir.toPath()}/spotbugs.gradle"

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // Spring stuff
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-log4j2")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.security:spring-security-web")
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.0.5.RELEASE')
    implementation('org.springframework.security.oauth:spring-security-oauth2:2.3.3.RELEASE')
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation('org.springframework.cloud:spring-cloud-starter-contract-verifier')
    testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc:$springRestDocsVersion")
    asciidoctor("org.springframework.restdocs:spring-restdocs-asciidoctor:$springRestDocsVersion")

    implementation project(":legacy")

    // Kotlin
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
}

configurations.all {
    exclude module: "spring-boot-starter-logging"
    exclude module: "logback-classic"
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:${springCloudContractVersion}"
    }
}

bootRun {
    dependsOn updateVersionFile
    sourceResources sourceSets.main
    systemProperties = System.properties
    systemProperties["spring.profiles.active"] = System.getProperty("spring.profiles.active", "dev, dev-h2")
}

jar {
    baseName = "credhub"
    def versionFile = new File("$projectDir/src/main/resources/version")
    if (System.getenv("VERSION")) {
        versionFile.write(System.getenv("VERSION"))
    }
}
